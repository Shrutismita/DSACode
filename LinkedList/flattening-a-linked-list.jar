Q:- https://www.geeksforgeeks.org/problems/flattening-a-linked-list/1

Description :- 
Flattening a Linked List 
Difficulty: MediumAccuracy: 51.53%Submissions: 155K+Points: 4
Given a Linked List, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked lists is in sorted order.
Flatten the Link List so all the nodes appear in a single level while maintaining the sorted order.

Note: The flattened list will be printed using the bottom pointer instead of the next pointer. Look at the printList() function in the driver code for more clarity.

Examples:

Input:

Output:  5-> 7-> 8- > 10 -> 19-> 20-> 22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation: The resultant linked lists has every node in a single level.(Note: | represents the bottom pointer.)

  Ans:
    writting the code using Recursion approach in Java
TC - not able to find
=====================================================================================================================
class Solution {    
    // Function to flatten a linked list
    Node flatten(Node head) {
        // code here
        if(head == null) return null;
         Node head2 = flatten(head.next);
         return mergeTwoSortedList(head,head2);
    }
    Node mergeTwoSortedList(Node l1, Node l2)
    {
        if(l1 == null) return l2;
        if(l2 == null)return l1;
        
        Node result;
        if(l1.data < l2.data)
        {
            result = l1;
            result.bottom = mergeTwoSortedList(l1.bottom,l2);
        }
        else
        {
            result = l2;
            result.bottom = mergeTwoSortedList(l1,l2.bottom);
        }
        return result;
    }
}

    
