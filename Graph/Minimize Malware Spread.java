Q:- https://leetcode.com/problems/minimize-malware-spread/
******************************************************************
//Using DSU
//T.C : O(n^2)
//S.C : O(n)
----------------------------------------------
  class Solution {
    class DSU {
        int[] size;
        int[] parent;
        int[] infected;

        public DSU(int n) 
        {
            size = new int[n];
            parent = new int[n];
            infected = new int[n];
            for (int i = 0; i < n; i++) 
            {
                parent[i] = i;
                size[i] = 1;
            }
        }

        public int find(int x) 
        {
            if (parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        public void union(int x, int y) 
        {
            int p1 = find(x);
            int p2 = find(y);
            if (p1 == p2) return;

            if (size[p1] < size[p2]) 
            {
                parent[p1] = p2;
                size[p2]++;
            } 
            else 
            {
                parent[p2] = p1;
                size[p1]++;
            }
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) 
    {
        int n = graph.length;
        DSU dsu = new DSU(n);
        for (int i = 0; i < n; i++) 
        {
            for (int j = 0; j < n; j++) 
            {
                if (graph[i][j] == 1) 
                {
                    dsu.union(i, j);
                }
            }
        }

        Arrays.sort(initial);
        for (int i : initial) 
        {
            int parent = dsu.find(i);
            dsu.infected[parent]++;
        }

        int max = 0;
        int ans = initial[0];
        for (int i : initial) 
        {
            int parent = dsu.find(i);
            if (dsu.infected[parent] == 1) 
            {
                if (max < dsu.size[parent]) 
                {
                    max = dsu.size[parent];
                    ans = i;
                }
            }
        }

        return ans;
    }
}
