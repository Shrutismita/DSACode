Q: https://www.naukri.com/code360/problems/count-inversions_615
Problem statement
For a given integer array/list 'ARR' of size 'N' containing all distinct values, find the total number of 'Inversions' that may exist.

An inversion is defined for a pair of integers in the array/list when the following two conditions are met.

A pair ('ARR[i]', 'ARR[j]') is said to be an inversion when:

1. 'ARR[i] > 'ARR[j]' 
2. 'i' < 'j'

Where 'i' and 'j' denote the indices ranging from [0, 'N').


Ans:import java.util.* ;
import java.io.*; 
public class Solution {
    public static long getInversions(long arr[], int n) {
        // Write your code here.
        return mergeSort(arr, 0, n - 1);
    }
    
    private static long mergeSort(long[] arr, int left, int right) {
        long invCount = 0;

        if (right > left) {
            int mid = (right + left) / 2;
            invCount += mergeSort(arr, left, mid);
            invCount += mergeSort(arr, mid + 1, right);
           
            invCount += Merge(arr, left, mid + 1, right);
        }
        return invCount;
    }

        private static long Merge(long[] arr, int left, int mid, int right) {
        int i = left, j = mid, k = 0;
        long invCount = 0;
        long[] temp = new long[(right - left + 1)];

        while ((i <= mid - 1) && (j <= right)) {
            if (arr[i] <= arr[j]) {
                temp[k] = arr[i];
                k++;
                i++;
            } 
            else {
                temp[k] = arr[j];
                invCount += (mid - i);
                k++;
                j++;
            }
        }

        while (i <= mid - 1) {
            temp[k] = arr[i];
            k++;
            i++;
        }

        while (j <= right) {
            temp[k] = arr[j];
            k++;
            j++;
        }

        for (i = left,k=0; i <= right; i++,k++) {
            arr[i] = temp[k];
        }

        return invCount;
    }
}
